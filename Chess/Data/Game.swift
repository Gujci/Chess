//
// Game.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import RESTAPI

public struct Game: Codable {

    public var _id: UUID
    public var owner: User?
    public var ownerSide: Side?
    public var guest: User?
    public var nextSide: Side?
    public var steps: [Step]?
    public var status: GameStatus?
    
    public init(_id: UUID, owner: User?, ownerSide: Side?, guest: User?, nextSide: Side?, steps: [Step]?, status: GameStatus?) {
        self._id = _id
        self.owner = owner
        self.ownerSide = ownerSide
        self.guest = guest
        self.nextSide = nextSide
        self.steps = steps
        self.status = status
    }
    
    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case owner
        case ownerSide
        case nextSide
        case guest
        case steps
        case status
    }
}

extension Game: ValidJSONData { }

extension Game: JSONCodable { }

public extension Game {
    
    func add(step: Step, _ done: @escaping (Bool) -> ()) {
        Server.shared.post("/games/\(_id.uuidString)/steps", data: step) { (status, _:JSON?) in
            switch status {
            case .created:
                done(true)
            default:
                done(false)
            }
        }
    }
    
    mutating func replace(step: Step, for figure: Figure) {
        guard let stepIndex = steps?.index(where: { step in step.figure == figure }) else { return }
        steps?[stepIndex] = step
    }
    
    func update(_ done: @escaping (Game?) -> ()) {
        Server.shared.get("/games/\(_id.uuidString)") { (_, game: Game?) in done(game) }
    }
}

public extension Game {
    
    public static var allRelated: [Game] = []
}
    
public extension Game {
    
    public static func getRelated(to user: User,_ done: @escaping ([Game]?) -> ()) {
        Server.shared.get("/games", query: ["participant": user._id.uuidString]) { (status, games: [Game]?) in
            guard let games = games else { return }
            allRelated = games
            done(games)
        }
    }
    
    public static func create(game: Game, _ done: @escaping (Bool) -> ()) {
        Server.shared.post("/games", data: game) { (status, _: JSON?) in
            done(status.isSuccess)
        }
    }
}
